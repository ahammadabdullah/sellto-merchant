generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model WaitList {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Merchant {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  shopName  String   @unique
  password  String
  createdAt DateTime @default(now())
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  password  String
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  shopId    String?    @unique
  role      UserRole   @default(merchant)
  status    UserStatus @default(pending)
  Shop      Shop?      @relation("userToShop", fields: [shopId], references: [id])
}

model Shop {
  id                  String     @id @default(cuid())
  name                String     @unique
  image               String?
  favicon             String?
  subTitle            String?
  description         String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  userId              String     @unique
  theme               Json?
  currency            String     @default("USD")
  productTypes        String?
  subDomain           String     @unique
  balance             Float      @default(0)
  status              ShopStatus @default(pending)
  orders              Order[]
  products            Product[]  @relation("ShopToProductById")
  productsBySubDomain Product[]  @relation("ShopToProductBySubDomain")
  tickets             Ticket[]
  User                User?      @relation("userToShop")
  Withdraw            Withdraw[]
}

model Product {
  id                    String    @id @default(cuid())
  price                 Float
  image                 String?
  shopId                String
  shopSubDomain         String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  customDefaultWarranty Boolean
  defaultWarrantyText   String?
  defaultWarrantyTime   String?
  fullDescription       String?
  productName           String
  shortDescription      String?
  visibility            String
  soldCount             Int       @default(0)
  stock                 Int       @default(0)
  shop                  Shop      @relation("ShopToProductById", fields: [shopId], references: [id])
  shopBySubDomain       Shop      @relation("ShopToProductBySubDomain", fields: [shopSubDomain], references: [subDomain])
  variants              Variant[]
}

model Variant {
  id                 String   @id @default(cuid())
  name               String
  shortDescription   String?
  description        String?
  price              Float
  currency           String   @default("USD")
  productType        String
  customWarranty     Boolean  @default(false)
  warrantyTime       String?
  warrantyText       String?
  serials            String?
  parsedSerial       Json?
  serialParseMethod  String?
  removeDuplicates   Boolean  @default(false)
  serviceDescription String?
  unlimitedStock     Boolean  @default(false)
  stock              Int      @default(0)
  minQuantity        Int?
  maxQuantity        Int?
  productId          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id             String      @id @default(cuid())
  customer_name  String
  revenue        Float
  shopId         String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  customer_email String
  paymentId      String
  productIds     String[]
  quantities     Int[]
  productNames   String[]
  variantIds     String[]
  status         OrderStatus @default(paid)
  shop           Shop        @relation(fields: [shopId], references: [id])
}

model Ticket {
  id        String       @id @default(cuid())
  subject   String
  email     String
  invoiceId String?
  shopId    String
  createdAt DateTime     @default(now())
  status    TicketStatus @default(open)
  type      TicketType   @default(shop)
  messages  Message[]
  Shop      Shop         @relation(fields: [shopId], references: [id])
}

model Message {
  id        String        @id @default(cuid())
  ticketId  String
  content   String
  createdAt DateTime      @default(now())
  sender    MessageSender @default(user)
  ticket    Ticket        @relation(fields: [ticketId], references: [id])
}

model Withdraw {
  id        String         @id @default(cuid())
  amount    Float
  shopId    String
  createdAt DateTime       @default(now())
  status    WithdrawStatus @default(pending)
  Shop      Shop           @relation(fields: [shopId], references: [id])
}

enum ShopStatus {
  pending
  clean
  warned
  banned
}

enum UserRole {
  merchant
  admin
}

enum UserStatus {
  pending
  active
  banned
}

enum OrderStatus {
  paid
  shipped
  delivered
  refunded
  cancelled
}

enum TicketStatus {
  open
  closed
}

enum TicketType {
  shop
  admin
}

enum MessageSender {
  user
  admin
  seller
}

enum WithdrawStatus {
  pending
  completed
  cancelled
}
