// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model WaitList {
  id        String   @id @unique @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Merchant {
  id        String   @id @unique @default(cuid())
  name      String
  email     String   @unique
  shopName  String   @unique
  password  String
  createdAt DateTime @default(now())
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String   @default("merchant")
  status    String   @default("pending")
  shop      Shop[]
}

model Shop {
  id        String    @id @default(uuid())
  name      String    @unique
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
}

model Product {
  id        String     @id @default(uuid())
  name      String     @unique
  price     Float
  image     String?
  shopId    String
  shop      Shop       @relation(fields: [shopId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  category  Category[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
