generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model WaitList {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Merchant {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  shopName  String   @unique
  password  String
  createdAt DateTime @default(now())
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String   @default("merchant")
  status    String   @default("pending")
  shopId    String?  @unique
  Shop      Shop?    @relation("userToShop", fields: [shopId], references: [id])
}

model Shop {
  id                  String     @id @default(cuid())
  name                String     @unique
  image               String?
  favicon             String?
  subTitle            String?
  description         String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  userId              String     @unique
  theme               Json?
  currency            String     @default("USD")
  productTypes        String?
  subDomain           String     @unique
  categories          Category[]
  orders              Order[]
  products            Product[]  @relation("ShopToProductById")
  productsBySubDomain Product[]  @relation("ShopToProductBySubDomain")
  User                User[]     @relation("userToShop")
}

model Product {
  id                    String    @id @default(cuid())
  price                 Float
  image                 String?
  shopId                String
  shopSubDomain         String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  customDefaultWarranty Boolean
  defaultWarrantyText   String?
  defaultWarrantyTime   String?
  fullDescription       String?
  productName           String
  shortDescription      String?
  visibility            String
  soldCount             Int       @default(0)
  orders                Order[]
  shop                  Shop      @relation("ShopToProductById", fields: [shopId], references: [id])
  shopBySubDomain       Shop      @relation("ShopToProductBySubDomain", fields: [shopSubDomain], references: [subDomain])
  variants              Variant[]
}

model Variant {
  id                 String   @id @default(cuid())
  name               String
  shortDescription   String?
  description        String?
  price              Float
  currency           String   @default("USD")
  productType        String
  customWarranty     Boolean  @default(false)
  warrantyTime       String?
  warrantyText       String?
  serials            String?
  parsedSerial       Json?
  serialParseMethod  String?
  removeDuplicates   Boolean  @default(false)
  serviceDescription String?
  unlimitedStock     Boolean  @default(false)
  stock              Int?     @default(0)
  minQuantity        Int?
  maxQuantity        Int?
  productId          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(cuid())
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])
}

model Order {
  id            String   @id @default(cuid())
  userId        String
  customer_name String
  revenue       Float
  productId     String
  quantity      Int
  shopId        String
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id])
  shop          Shop     @relation(fields: [shopId], references: [id])
}
